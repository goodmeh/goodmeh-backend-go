// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: requests.sql

package repository

import (
	"context"
)

const deleteRequest = `-- name: DeleteRequest :exec
DELETE FROM request
WHERE place_id = $1
    AND status = $2
`

type DeleteRequestParams struct {
	PlaceID string `json:"place_id"`
	Status  int32  `json:"status"`
}

func (q *Queries) DeleteRequest(ctx context.Context, arg DeleteRequestParams) error {
	_, err := q.db.Exec(ctx, deleteRequest, arg.PlaceID, arg.Status)
	return err
}

const getRequest = `-- name: GetRequest :one
SELECT place_id, created_at, status, failed, batch_job_id
FROM request
WHERE place_id = $1
    AND status = $2
`

type GetRequestParams struct {
	PlaceID string `json:"place_id"`
	Status  int32  `json:"status"`
}

func (q *Queries) GetRequest(ctx context.Context, arg GetRequestParams) (Request, error) {
	row := q.db.QueryRow(ctx, getRequest, arg.PlaceID, arg.Status)
	var i Request
	err := row.Scan(
		&i.PlaceID,
		&i.CreatedAt,
		&i.Status,
		&i.Failed,
		&i.BatchJobID,
	)
	return i, err
}

const insertRequest = `-- name: InsertRequest :exec
INSERT INTO request (place_id, created_at, status, batch_job_id)
VALUES ($1, NOW(), $2, $3)
`

type InsertRequestParams struct {
	PlaceID    string  `json:"place_id"`
	Status     int32   `json:"status"`
	BatchJobID *string `json:"batch_job_id"`
}

func (q *Queries) InsertRequest(ctx context.Context, arg InsertRequestParams) error {
	_, err := q.db.Exec(ctx, insertRequest, arg.PlaceID, arg.Status, arg.BatchJobID)
	return err
}

const setRequestFailed = `-- name: SetRequestFailed :exec
UPDATE request
SET failed = TRUE
WHERE place_id = $1
    AND status = $2
`

type SetRequestFailedParams struct {
	PlaceID string `json:"place_id"`
	Status  int32  `json:"status"`
}

func (q *Queries) SetRequestFailed(ctx context.Context, arg SetRequestFailedParams) error {
	_, err := q.db.Exec(ctx, setRequestFailed, arg.PlaceID, arg.Status)
	return err
}
