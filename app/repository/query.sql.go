// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package repository

import (
	"context"
)

const getFieldCategories = `-- name: GetFieldCategories :many
SELECT id, name
FROM field_category
`

func (q *Queries) GetFieldCategories(ctx context.Context) ([]FieldCategory, error) {
	rows, err := q.db.Query(ctx, getFieldCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FieldCategory
	for rows.Next() {
		var i FieldCategory
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaceImageUrls = `-- name: GetPlaceImageUrls :many
SELECT review_image.image_url
FROM review_image
    INNER JOIN review ON review_image.review_id = review.review_id
WHERE review.place_id = $1
ORDER BY review.created_at DESC
LIMIT $2 OFFSET $3
`

type GetPlaceImageUrlsParams struct {
	PlaceID string `json:"place_id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) GetPlaceImageUrls(ctx context.Context, arg GetPlaceImageUrlsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getPlaceImageUrls, arg.PlaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var image_url string
		if err := rows.Scan(&image_url); err != nil {
			return nil, err
		}
		items = append(items, image_url)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaceNames = `-- name: GetPlaceNames :many
SELECT place.id,
    place.name
FROM place
`

type GetPlaceNamesRow struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetPlaceNames(ctx context.Context) ([]GetPlaceNamesRow, error) {
	rows, err := q.db.Query(ctx, getPlaceNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlaceNamesRow
	for rows.Next() {
		var i GetPlaceNamesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlaceReviews = `-- name: GetPlaceReviews :many
SELECT r.id, r.user_id, r.rating, r.text, r.created_at, r.weight, r.place_id, r.price_range, r.summary, r.business_summary,
    u.id, u.name, u.photo_uri, u.review_count, u.photo_count, u.rating_count, u.is_local_guide, u.score,
    rr.review_id, rr.text, rr.created_at
FROM review r
    INNER JOIN "user" u ON r.user_id = u.id
    LEFT JOIN review_reply rr ON r.id = rr.review_id
WHERE place_id = $1
ORDER BY r.created_at DESC
LIMIT $2 OFFSET $3
`

type GetPlaceReviewsParams struct {
	PlaceID string `json:"place_id"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type GetPlaceReviewsRow struct {
	Review      Review      `json:"review"`
	User        User        `json:"user"`
	ReviewReply ReviewReply `json:"review_reply"`
}

func (q *Queries) GetPlaceReviews(ctx context.Context, arg GetPlaceReviewsParams) ([]GetPlaceReviewsRow, error) {
	rows, err := q.db.Query(ctx, getPlaceReviews, arg.PlaceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlaceReviewsRow
	for rows.Next() {
		var i GetPlaceReviewsRow
		if err := rows.Scan(
			&i.Review.ID,
			&i.Review.UserID,
			&i.Review.Rating,
			&i.Review.Text,
			&i.Review.CreatedAt,
			&i.Review.Weight,
			&i.Review.PlaceID,
			&i.Review.PriceRange,
			&i.Review.Summary,
			&i.Review.BusinessSummary,
			&i.User.ID,
			&i.User.Name,
			&i.User.PhotoUri,
			&i.User.ReviewCount,
			&i.User.PhotoCount,
			&i.User.RatingCount,
			&i.User.IsLocalGuide,
			&i.User.Score,
			&i.ReviewReply.ReviewID,
			&i.ReviewReply.Text,
			&i.ReviewReply.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRandomPlaces = `-- name: GetRandomPlaces :many
SELECT id, name, rating, weighted_rating, user_rating_count, summary, last_scraped, image_url, recompute_stats, primary_type, business_summary, price_range, earliest_review_date, lat, lng
FROM place
ORDER BY RANDOM()
LIMIT $1
`

func (q *Queries) GetRandomPlaces(ctx context.Context, limit int32) ([]Place, error) {
	rows, err := q.db.Query(ctx, getRandomPlaces, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Place
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Rating,
			&i.WeightedRating,
			&i.UserRatingCount,
			&i.Summary,
			&i.LastScraped,
			&i.ImageUrl,
			&i.RecomputeStats,
			&i.PrimaryType,
			&i.BusinessSummary,
			&i.PriceRange,
			&i.EarliestReviewDate,
			&i.Lat,
			&i.Lng,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewImageUrls = `-- name: GetReviewImageUrls :many
SELECT review_image.review_id,
    JSON_AGG(review_image.image_url) AS image_urls
FROM review_image
WHERE review_id = ANY($1::text [])
GROUP BY review_image.review_id
ORDER BY review_image.review_id
`

type GetReviewImageUrlsRow struct {
	ReviewID  string `json:"review_id"`
	ImageUrls []byte `json:"image_urls"`
}

func (q *Queries) GetReviewImageUrls(ctx context.Context, reviewIds []string) ([]GetReviewImageUrlsRow, error) {
	rows, err := q.db.Query(ctx, getReviewImageUrls, reviewIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetReviewImageUrlsRow
	for rows.Next() {
		var i GetReviewImageUrlsRow
		if err := rows.Scan(&i.ReviewID, &i.ImageUrls); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertField = `-- name: InsertField :exec
INSERT INTO field (name, category_id)
VALUES ($1, $2) ON CONFLICT (name, category_id) DO NOTHING
`

type InsertFieldParams struct {
	Name       string `json:"name"`
	CategoryID int32  `json:"category_id"`
}

func (q *Queries) InsertField(ctx context.Context, arg InsertFieldParams) error {
	_, err := q.db.Exec(ctx, insertField, arg.Name, arg.CategoryID)
	return err
}
